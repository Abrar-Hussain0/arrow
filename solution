import pyarrow as pa
import pandas as pd

# Custom serialization function for dictionaries
def serialize_dict(d):
    # Implement your custom serialization logic here
    # For simplicity, let's convert all keys to strings
    return {str(key): value for key, value in d.items()}

# Custom deserialization function for dictionaries
def deserialize_dict(serialized_d):
    # Implement your custom deserialization logic here
    return {eval(key): value for key, value in serialized_d.items()}

# Sample DataFrame
df = pd.DataFrame({"dicts": [
    {"foo": "bar"},
    {"bar": "baz"},
    {"another": "key"}
]})

# Apply custom serialization to the dictionary column
df['dicts'] = df['dicts'].apply(serialize_dict)

# Explicitly define the schema with map type
schema = pa.schema([('dicts', pa.map_(pa.string(), pa.string()))])

# Convert to PyArrow Table with explicit schema
arrow_table = pa.Table.from_pandas(df, schema=schema)

# Convert back to Pandas DataFrame and concatenate chunks
df_round_trip_chunks = pa.Table.to_pandas(arrow_table, split_blocks=True)
df_round_trip = pd.concat(df_round_trip_chunks, ignore_index=True)

# Apply custom deserialization
df_round_trip['dicts'] = df_round_trip['dicts'].apply(deserialize_dict)

# Display the round-tripped DataFrame
print(df_round_trip)
